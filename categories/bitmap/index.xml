<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Bitmap on xiangcman</title>
        <link>https://example.com/categories/bitmap/</link>
        <description>Recent content in Bitmap on xiangcman</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Tue, 11 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://example.com/categories/bitmap/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>bitmap总结</title>
        <link>https://example.com/p/bitmap%E6%80%BB%E7%BB%93/</link>
        <pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/bitmap%E6%80%BB%E7%BB%93/</guid>
        <description>&lt;h3 id=&#34;bitmap解码方式&#34;&gt;bitmap解码方式
&lt;/h3&gt;&lt;p&gt;解码指的是把图片通过文件读取到内存中，而bitmap正是承载着图片在内存中存储的对象。关于图片的解码方式有如下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ALPHA_8：只存储透明度信息，一个像素占用一个字节，一个字节是8位。所以在在该解码方式下，一个像素是占8位。&lt;/li&gt;
&lt;li&gt;ARGB_4444：每个像素占2个字节，也就是16位，其中A占4位，R占4位，G占4位，B占4位（4+4+4+4），支持alpha通道
&lt;ul&gt;
&lt;li&gt;从API13开始不推荐使用，在android4.4上面，设置的ARGB_4444会被系统使用ARGB_8888替换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ARGB_8888：bitmap编码的默认方式，每像素占4字节，每个通道分别占8位&lt;/li&gt;
&lt;li&gt;RGB_565：每像素占用2字节，RGB分别占5，6，5位，不支持alpha通道
参考：&lt;a class=&#34;link&#34; href=&#34;https://www.ieclipse.cn/2017/06/14/Android/Android-bitmap-config/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ieclipse.cn/2017/06/14/Android/Android-bitmap-config/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上面提到的RGB_565解码方式，为什么是5,6,5呢？
&lt;ul&gt;
&lt;li&gt;RGB_565 是早期 Android 在 内存限制、渲染效率、视觉质量 三者间找到的平衡点。随着设备硬件提升，更高精度的格式（如 ARGB_8888）逐渐成为默认选项，但在特定优化场景中，RGB_565 仍是一个有效的省内存方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;测试各种解码方式&#34;&gt;测试各种解码方式
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/bitmap%E6%80%BB%E7%BB%93/%E5%90%84%E7%A7%8D%E8%A7%A3%E7%A0%81%E6%96%B9%E5%BC%8F%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png&#34;
	width=&#34;1712&#34;
	height=&#34;1028&#34;
	srcset=&#34;https://example.com/p/bitmap%E6%80%BB%E7%BB%93/%E5%90%84%E7%A7%8D%E8%A7%A3%E7%A0%81%E6%96%B9%E5%BC%8F%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C_hu17821653134809353067.png 480w, https://example.com/p/bitmap%E6%80%BB%E7%BB%93/%E5%90%84%E7%A7%8D%E8%A7%A3%E7%A0%81%E6%96%B9%E5%BC%8F%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C_hu3122889792892425571.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;399px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于带有透明的图片：在ALPHA_8下，它是只有透明信息，但是他占用的大小还是一个像素占4个字节，并且展示的图片和ARGB_8888一样的。RGB_565是不带透明通道的，但是带有透明度的图片还是能呈现透明样式的，并且占用内存和ARGB_8888一样的。&lt;/li&gt;
&lt;li&gt;对于非透明的图片：RGB_565下内存占用是ARGB_8888的一半。在ALPHA_8下面展示的图片所占用的字节大小和ARGB_8888是一样的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于这块为什么带有透明的图片在alpha_8下还是和argb_8888下面一样的，下面文章有讲解：&lt;/br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/7059206294959292452&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/7059206294959292452&lt;/a&gt;&lt;/br&gt;
&lt;img src=&#34;https://example.com/p/bitmap%E6%80%BB%E7%BB%93/alpha_8%E4%BD%BF%E7%94%A8%E7%BB%93%E8%AE%BA.png&#34;
	width=&#34;1568&#34;
	height=&#34;366&#34;
	srcset=&#34;https://example.com/p/bitmap%E6%80%BB%E7%BB%93/alpha_8%E4%BD%BF%E7%94%A8%E7%BB%93%E8%AE%BA_hu986952664923664878.png 480w, https://example.com/p/bitmap%E6%80%BB%E7%BB%93/alpha_8%E4%BD%BF%E7%94%A8%E7%BB%93%E8%AE%BA_hu9859499271087307594.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;428&#34;
		data-flex-basis=&#34;1028px&#34;
	
&gt;
测试了下带透明的图片使用RGB_565的时候，发现解码生成的bitmap的config还是ARGB_8888，说明系统还是会选择合适的颜色模式来解码，通过如下获取最终的解码方式：
&lt;img src=&#34;https://example.com/p/bitmap%E6%80%BB%E7%BB%93/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96bitmap%E7%9A%84%E8%A7%A3%E7%A0%81%E6%96%B9%E5%BC%8F.png&#34;
	width=&#34;834&#34;
	height=&#34;114&#34;
	srcset=&#34;https://example.com/p/bitmap%E6%80%BB%E7%BB%93/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96bitmap%E7%9A%84%E8%A7%A3%E7%A0%81%E6%96%B9%E5%BC%8F_hu505634521320757469.png 480w, https://example.com/p/bitmap%E6%80%BB%E7%BB%93/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96bitmap%E7%9A%84%E8%A7%A3%E7%A0%81%E6%96%B9%E5%BC%8F_hu9565154906309646061.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;731&#34;
		data-flex-basis=&#34;1755px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;bitmap压缩&#34;&gt;bitmap压缩
&lt;/h3&gt;&lt;p&gt;1.采样率压缩：设置BitmapFactory.Options.inSampleSize，值越大，对应的宽高的像素值越小，如果inSampleSize=2，则内存是原来的4分支1了，因为宽高各减少2倍&lt;/br&gt;
2.设置编码格式：BitmapFactory.Options.inPreferredConfig，一般设置有RGB_565，ARGB_8888，RGB_565的时候忽略了透明通道。&lt;/br&gt;
3.质量压缩：质量压缩不改变图片的像素，改变图片的位深和透明度，适合二进制图片数据，常见的有PNG、JPEG、WEBP压缩算法。其中PNG压缩算法称为无损压缩，基本不会改变图片占用文件的大小，JPEG会根据quality参数来实现压缩。
经过测试：在PNG压缩算法下，图片不会改变，因此被称为无损压缩&lt;/p&gt;
&lt;p&gt;在JPEG压缩算法下，如果是带有透明的图片，由于会忽略透明度，因此会显示成黑色。并且发现保存到本地的文件大小会增大，但是二进制的byte数会随着quality变小而变小。因此带有透明的图片慎用&lt;/p&gt;
&lt;p&gt;web压缩算法是一种有损压缩，webp图像的体积要比jpeg格式图像小40%，但是webp的编码时间比jpeg格式长8倍。&lt;/br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844903725081821198#heading-12&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6844903725081821198#heading-12&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;bitmap内存获取&#34;&gt;bitmap内存获取
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;bitmap的宽（像素个数）*bitmap的高（像素个数）*每个像素所占用的内存&lt;/li&gt;
&lt;li&gt;bitmap的实际宽：
&lt;ul&gt;
&lt;li&gt;图片的真实宽*设备的densityDpi/图片所在的drawable的densityDpi&lt;/li&gt;
&lt;li&gt;设备的densityDpi:最终会赋值到上BitmapFactory.Options.inTargetDensity，通过如下方式获取设备的densityDpi：
&lt;img src=&#34;https://example.com/p/bitmap%E6%80%BB%E7%BB%93/%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E7%9A%84dpi.png&#34;
	width=&#34;1016&#34;
	height=&#34;56&#34;
	srcset=&#34;https://example.com/p/bitmap%E6%80%BB%E7%BB%93/%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E7%9A%84dpi_hu15454974039080344855.png 480w, https://example.com/p/bitmap%E6%80%BB%E7%BB%93/%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E7%9A%84dpi_hu2316665679292148829.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1814&#34;
		data-flex-basis=&#34;4354px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;图片所在的drawable的densityDpi：最终会设置到BitmapFactory.Options.inDensity上，通过如下方式获取：
&lt;img src=&#34;https://example.com/p/bitmap%E6%80%BB%E7%BB%93/%E8%8E%B7%E5%8F%96bitmap%E5%9C%A8drawable%E4%B8%8B%E7%9A%84dpi.png&#34;
	width=&#34;1036&#34;
	height=&#34;164&#34;
	srcset=&#34;https://example.com/p/bitmap%E6%80%BB%E7%BB%93/%E8%8E%B7%E5%8F%96bitmap%E5%9C%A8drawable%E4%B8%8B%E7%9A%84dpi_hu2115093414391862001.png 480w, https://example.com/p/bitmap%E6%80%BB%E7%BB%93/%E8%8E%B7%E5%8F%96bitmap%E5%9C%A8drawable%E4%B8%8B%E7%9A%84dpi_hu1836960473192914154.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;631&#34;
		data-flex-basis=&#34;1516px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关于设备的dpi和drawable的dpi可以跟着源码看下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bitmap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;decodeResource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Resources&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Options&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bitmap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//获取图片所在drawable的dpi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TypedValue&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TypedValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;openRawResource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decodeResourceStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/p/bitmap%E6%80%BB%E7%BB%93/decodeResourceStream%E6%96%B9%E6%B3%95%E8%A7%A3%E6%9E%90.png&#34;
	width=&#34;1798&#34;
	height=&#34;1266&#34;
	srcset=&#34;https://example.com/p/bitmap%E6%80%BB%E7%BB%93/decodeResourceStream%E6%96%B9%E6%B3%95%E8%A7%A3%E6%9E%90_hu4574503142038904580.png 480w, https://example.com/p/bitmap%E6%80%BB%E7%BB%93/decodeResourceStream%E6%96%B9%E6%B3%95%E8%A7%A3%E6%9E%90_hu6073620810222394105.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;
上面逻辑是如果没获取到drawable的density，那么就设置为160，否则直接给Options.inDensity设置为density。然后将设备的density设置到Options.inTargetDensity。
关于drawable的densityDpi的值如下：
&lt;img src=&#34;https://example.com/p/bitmap%E6%80%BB%E7%BB%93/drawable%E5%AF%B9%E5%BA%94%E7%9A%84density%E5%80%BC.png&#34;
	width=&#34;1514&#34;
	height=&#34;382&#34;
	srcset=&#34;https://example.com/p/bitmap%E6%80%BB%E7%BB%93/drawable%E5%AF%B9%E5%BA%94%E7%9A%84density%E5%80%BC_hu9158691660409329332.png 480w, https://example.com/p/bitmap%E6%80%BB%E7%BB%93/drawable%E5%AF%B9%E5%BA%94%E7%9A%84density%E5%80%BC_hu10773134284698847026.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;396&#34;
		data-flex-basis=&#34;951px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;结论：图片所占内存和drawable的densityDpi成反比。&lt;/p&gt;
&lt;p&gt;来源：&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844904166138069005&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6844904166138069005&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;bitmap内存分配：&lt;/br&gt;
8.0之前的Bitmap像素数据基本存储在Java heap&lt;/br&gt;
8.0之后的 Bitmap像素数据基本存储在native heap&lt;/br&gt;
参考：&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844903608887017485&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6844903608887017485&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;bitmap像素分配：&lt;/br&gt;
参考：&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844903715766272013&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6844903715766272013&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
